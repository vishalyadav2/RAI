class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)

        if root_x != root_y:
            if self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            else:
                self.parent[root_x] = root_y
                if self.rank[root_x] == self.rank[root_y]:
                    self.rank[root_y] += 1


def kruskal(graph):
    edges = [(graph[u][v], u, v) for u in graph for v in graph[u]]
    edges.sort()

    n = len(graph)
    uf = UnionFind(n)
    mst = []

    for weight, u, v in edges:
        if uf.find(u) != uf.find(v):
            uf.union(u, v)
            mst.append((u, v, weight))

    return mst
graph = {
    0: {1: 2, 3: 1},
    1: {0: 2, 3: 3, 4: 10},
    2: {},
    3: {0: 1, 1: 3, 4: 4},
    4: {1: 10, 3: 4}
}

minimum_spanning_tree = kruskal(graph)
print(minimum_spanning_tree)
